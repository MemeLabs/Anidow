<UserControl
    x:Class="Anidow.Pages.MainView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:extensions="clr-namespace:AdonisUI.Extensions;assembly=AdonisUI"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:local="clr-namespace:Anidow.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:s="https://github.com/canton7/Stylet"
    xmlns:status="clr-namespace:Anidow.Pages.Components.Status"
    xmlns:stylet="clr-namespace:Stylet;assembly=Stylet"
    d:DataContext="{d:DesignInstance local:MainViewModel}"
    d:DesignHeight="300"
    d:DesignWidth="300"
    mc:Ignorable="d">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <TabControl
            DisplayMemberPath="DisplayName"
            ItemsSource="{Binding Items, Mode=OneWay}"
            SelectedIndex="0"
            SelectedItem="{Binding ActiveItem, Mode=TwoWay}"
            Style="{StaticResource TabControlCustom}">
            <TabControl.ContentTemplate>
                <DataTemplate DataType="stylet:Screen">
                    <ContentControl
                        Margin="2"
                        HorizontalContentAlignment="Stretch"
                        VerticalContentAlignment="Stretch"
                        s:View.Model="{Binding}"
                        IsTabStop="False" />
                </DataTemplate>
            </TabControl.ContentTemplate>
        </TabControl>
        <Border
            Grid.Row="1"
            Margin="4,0,4,4"
            Padding="2"
            Background="{DynamicResource {x:Static adonisUi:Brushes.Layer1BackgroundBrush}}"
            CornerRadius="4">
            <Grid extensions:LayerExtension.IncreaseLayer="True" extensions:LayerExtension.Layer="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>


                <ToggleButton
                    Grid.Column="0"
                    Margin="0,0,6,0"
                    Padding="6,4"
                    ContextMenuService.Placement="Top"
                    IsChecked="{Binding StatusViewModel.IsOpen}"
                    Style="{DynamicResource {x:Static adonisUi:Styles.ToolbarToggleButton}}"
                    ToolTip="RSS feed refresh timers">
                    <ToggleButton.ContextMenu>
                        <ContextMenu StaysOpen="True">
                            <MenuItem Header="Nyaa">
                                <MenuItem.Icon>
                                    <ContentControl
                                        Content="{iconPacks:FontAwesome RunningSolid}"
                                        ToolTip="Running"
                                        Visibility="{Binding StatusViewModel.RunningNyaa, Converter={x:Static s:BoolToVisibilityConverter.Instance}}" />
                                </MenuItem.Icon>
                                <MenuItem
                                    s:View.ActionTarget="{Binding StatusViewModel}"
                                    Command="{s:Action CheckNyaa,
                                                       ActionNotFound=Disable}"
                                    Header="Check now"
                                    Icon="{iconPacks:FontAwesome SyncSolid}" />
                                <MenuItem
                                    s:View.ActionTarget="{Binding StatusViewModel}"
                                    Command="{s:Action StartNyaa,
                                                       ActionNotFound=Disable}"
                                    Header="Start"
                                    Icon="{iconPacks:FontAwesome PlaySolid}"
                                    Visibility="{Binding StatusViewModel.RunningNyaa, Converter={x:Static s:BoolToVisibilityConverter.InverseInstance}}" />
                                <MenuItem
                                    s:View.ActionTarget="{Binding StatusViewModel}"
                                    Command="{s:Action PauseNyaa,
                                                       ActionNotFound=Disable}"
                                    Header="Pause"
                                    Icon="{iconPacks:FontAwesome PauseSolid}"
                                    Visibility="{Binding StatusViewModel.RunningNyaa, Converter={x:Static s:BoolToVisibilityConverter.Instance}}" />
                            </MenuItem>
                            <MenuItem Header="AnimeBytes (all)">
                                <MenuItem.Icon>
                                    <ContentControl
                                        Content="{iconPacks:FontAwesome RunningSolid}"
                                        ToolTip="Running"
                                        Visibility="{Binding StatusViewModel.RunningAnimeBytesAll, Converter={x:Static s:BoolToVisibilityConverter.Instance}}" />
                                </MenuItem.Icon>
                                <MenuItem
                                    s:View.ActionTarget="{Binding StatusViewModel}"
                                    Command="{s:Action CheckAnimeBytesAll,
                                                       ActionNotFound=Disable}"
                                    Header="Check now"
                                    Icon="{iconPacks:FontAwesome SyncSolid}" />
                                <MenuItem
                                    s:View.ActionTarget="{Binding StatusViewModel}"
                                    Command="{s:Action StartAnimeBytesAll,
                                                       ActionNotFound=Disable}"
                                    Header="Start"
                                    Icon="{iconPacks:FontAwesome PlaySolid}"
                                    Visibility="{Binding StatusViewModel.RunningAnimeBytesAll, Converter={x:Static s:BoolToVisibilityConverter.InverseInstance}}" />
                                <MenuItem
                                    s:View.ActionTarget="{Binding StatusViewModel}"
                                    Command="{s:Action PauseAnimeBytesAll,
                                                       ActionNotFound=Disable}"
                                    Header="Pause"
                                    Icon="{iconPacks:FontAwesome PauseSolid}"
                                    Visibility="{Binding StatusViewModel.RunningAnimeBytesAll, Converter={x:Static s:BoolToVisibilityConverter.Instance}}" />
                            </MenuItem>
                            <MenuItem Header="AnimeBytes (airing)">
                                <MenuItem.Icon>
                                    <ContentControl
                                        Content="{iconPacks:FontAwesome RunningSolid}"
                                        ToolTip="Running"
                                        Visibility="{Binding StatusViewModel.RunningAnimeBytesAiring, Converter={x:Static s:BoolToVisibilityConverter.Instance}}" />
                                </MenuItem.Icon>
                                <MenuItem
                                    s:View.ActionTarget="{Binding StatusViewModel}"
                                    Command="{s:Action CheckAnimeBytesAiring,
                                                       ActionNotFound=Disable}"
                                    Header="Check now"
                                    Icon="{iconPacks:FontAwesome SyncSolid}" />
                                <MenuItem
                                    s:View.ActionTarget="{Binding StatusViewModel}"
                                    Command="{s:Action StartAnimeBytesAiring,
                                                       ActionNotFound=Disable}"
                                    Header="Start"
                                    Icon="{iconPacks:FontAwesome PlaySolid}"
                                    Visibility="{Binding StatusViewModel.RunningAnimeBytesAiring, Converter={x:Static s:BoolToVisibilityConverter.InverseInstance}}" />
                                <MenuItem
                                    s:View.ActionTarget="{Binding StatusViewModel}"
                                    Command="{s:Action PauseAnimeBytesAiring,
                                                       ActionNotFound=Disable}"
                                    Header="Pause"
                                    Icon="{iconPacks:FontAwesome PauseSolid}"
                                    Visibility="{Binding StatusViewModel.RunningAnimeBytesAiring, Converter={x:Static s:BoolToVisibilityConverter.Instance}}" />
                            </MenuItem>
                        </ContextMenu>
                    </ToggleButton.ContextMenu>
                    <StackPanel Orientation="Horizontal">
                        <iconPacks:FontAwesome Kind="ClockSolid" />
                        <!--<TextBlock
                            Margin="6,0,0,0"
                            VerticalAlignment="Center"
                            Text="timers" />-->
                    </StackPanel>
                </ToggleButton>
                <Popup
                    Grid.Column="0"
                    AllowsTransparency="True"
                    HorizontalOffset="-2"
                    IsOpen="{Binding StatusViewModel.IsOpen}"
                    Placement="Top"
                    PlacementTarget="{Binding ElementName=StatusToggle}"
                    StaysOpen="False"
                    VerticalOffset="-4">
                    <ContentControl s:View.Model="{Binding StatusViewModel}" />
                </Popup>
                <status:StatusMiniView Grid.Column="1" DataContext="{Binding StatusViewModel}" />
            </Grid>
        </Border>
    </Grid>
</UserControl>